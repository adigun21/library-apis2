package com.libraryapis2.publisher;


import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.junit.Assert.*;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Optional;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mock.*;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.dao.DataIntegrityViolationException;

import com.libraryapis2.exception.LibraryResourceAlreadyExistException;
import com.libraryapis2.exception.LibraryResourceNotFoundException;
import com.libraryapis2.testUtils.LibraryApiTestUtil;
import com.libraryapis2.testUtils.TestConstants;

@RunWith(MockitoJUnitRunner.class)
public class PublisherServiceTest {
	
	@Mock
	PublisherRepository publisherRepository;
	
	PublisherService publisherService;

	@Before
	public  void setUp() throws Exception {
		publisherService = new PublisherService(publisherRepository);
	}

	
	@Test
	public void AddPublisher_success() throws LibraryResourceAlreadyExistException {
		
		when(publisherRepository.save(any(PublisherEntity.class)))
		.thenReturn(LibraryApiTestUtil.createPublisherEntity());
		Publisher publisher = LibraryApiTestUtil.createPublisher();
		publisherService.addPublisher(publisher, TestConstants.API_TRACE_ID);
		
		verify(publisherRepository, times(1)).save(any(PublisherEntity.class));
		assertNotNull(publisher.getPublisherId());
		
	}

	@Test(expected = LibraryResourceAlreadyExistException.class)
	public void AddPublisher_failure() throws LibraryResourceAlreadyExistException {
		
		doThrow(DataIntegrityViolationException.class).when(publisherRepository.save(any(PublisherEntity.class)));
		Publisher publisher = LibraryApiTestUtil.createPublisher();
		publisherService.addPublisher(publisher, TestConstants.API_TRACE_ID);
		verify(publisherRepository, times(1)).save(any(PublisherEntity.class));
		}
	


	@Test
	public void GetPublisher_success() throws LibraryResourceNotFoundException {
		
		when(publisherRepository.findById(anyInt()))
			.thenReturn(LibraryApiTestUtil.createPublisherEntityOptional());
		Publisher publisher = publisherService.getPublisher(123,TestConstants.API_TRACE_ID);
		
		verify(publisherRepository, times(1)).findById(123);
		assertNotNull(publisher);
		assertNotNull(publisher.getPublisherId());
		
		
		
	}

	@Test(expected = LibraryResourceNotFoundException.class)
	public void GetPublisher_failure() throws LibraryResourceNotFoundException {
		
		when(publisherRepository.findById(anyInt()))
		.thenReturn(Optional.empty());
		publisherService.getPublisher(123,TestConstants.API_TRACE_ID);
		verify(publisherRepository, times(1)).findById(123);
		
		
		
	}

		@Test
	public void UpdatePublisher_success() throws LibraryResourceAlreadyExistException {
		
		
		when(publisherRepository.save(any(PublisherEntity.class)))
		.thenReturn(LibraryApiTestUtil.createPublisherEntity());
		Publisher publisher = LibraryApiTestUtil.createPublisher();
		publisherService.addPublisher(publisher, TestConstants.API_TRACE_ID);
		verify(publisherRepository, times(1)).save(any(PublisherEntity.class));
		
		publisher.setEmailId(TestConstants.TEST_PUBLISHER_EMAIL_UPDATED);
		publisher.setPhoneNumber(TestConstants.TEST_PUBLISHER_PHONE_UPDATED);
		
		when(publisherRepository.findById(anyInt()))
		.thenReturn(LibraryApiTestUtil.createPublisherEntityOptional());
		publisherService.addPublisher(publisher, TestConstants.API_TRACE_ID);
		
		verify(publisherRepository, times(1)).findById(publisher.getPublisherId());
		verify(publisherRepository, times(2)).save(any(PublisherEntity.class));
		
		assertTrue(TestConstants.TEST_PUBLISHER_EMAIL_UPDATED.equals(publisher.getEmailId()));
		assertTrue(TestConstants.TEST_PUBLISHER_PHONE_UPDATED.equals(publisher.getPhoneNumber()));
		
	}

	@Test
	public void DeletePublisher() {
		
	}

	@Test
	public void SearchPublisher() {
		
	}

}
