package com.libraryapis2.author;


import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.junit.Assert.*;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mock.*;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;

import com.libraryapis2.Author.Author;
import com.libraryapis2.Author.AuthorRepository;
import com.libraryapis2.Author.AuthorService;
import com.libraryapis2.exception.LibraryResourceAlreadyExistException;
import com.libraryapis2.exception.LibraryResourceNotFoundException;
import com.libraryapis2.testUtils.LibraryApiTestUtil;
import com.libraryapis2.testUtils.TestConstants;

@RunWith(MockitoJUnitRunner.class)
public class AuthorServiceTest {
	
	@Mock
	AuthorRepository authorRepository;
	
	AuthorService authorService;

	@Before
	public  void setUp() throws Exception {
		authorService = new AuthorService(authorRepository);
	}

	
	@Test
	public void AddAuthor_success() throws LibraryResourceAlreadyExistException {
		
		when(authorRepository.save(any(AuthorEntity.class)))
		.thenReturn(LibraryApiTestUtil.createAuthorEntity());
		Author author= LibraryApiTestUtil.createAuthor();
		authorService.addAuthor(author, TestConstants.API_TRACE_ID);
		
		verify(authorRepository, times(1)).save(any(AuthorEntity.class));
		assertNotNull(author.getAuthorId());
		assertTrue(author, TestConstants.TEST_AUTHOR_FIRST_NAME));
		
	}

	@Test(expected = LibraryResourceAlreadyExistException.class)
	public void AddAuthor_failure() throws LibraryResourceAlreadyExistException {
		
		doThrow(DataIntegrityViolationException.class).when(authorRepository.save(any(AuthorEntity.class)));
		Author author = LibraryApiTestUtil.createAuthor();
		authorService.addAuthor(author, TestConstants.API_TRACE_ID);
		verify(authorRepository, times(1)).save(any(AuthorEntity.class));
		}
	


	@Test
	public void GetAuthor_success() throws LibraryResourceNotFoundException {
		
		when(authorRepository.findById(anyInt()))
			.thenReturn(LibraryApiTestUtil.createAuthorEntityOptional());
		Author author = authorService.getAuthor(123,TestConstants.API_TRACE_ID);
		
		verify(authorRepository, times(1)).findById(123);
		assertNotNull(author);
		assertNotNull(author.getAuthorId());
		
		
		
	}

	@Test(expected = LibraryResourceNotFoundException.class)
	public void GetAuthor_failure() throws LibraryResourceNotFoundException {
		
		when(authorRepository.findById(anyInt()))
		.thenReturn(Optional.empty());
		authorService.getAuthor(123,TestConstants.API_TRACE_ID);
		verify(authorRepository, times(1)).findById(123);
		
		
		
	}

		@Test
	public void UpdateAuthor_success() throws LibraryResourceAlreadyExistException, LibraryResourceNotFoundException {
		
		
		AuthorEntity authorEntity = LibraryApiTestUtil.createAuthorEntity();
		when(authorRepository.save(any(AuthorEntity.class)))
		.thenReturn(LibraryApiTestUtil.createAuthorEntity());
		Author author = LibraryApiTestUtil.createAuthor();
		authorService.addAuthor(author, TestConstants.API_TRACE_ID);
		verify(authorRepository, times(1)).save(any(AuthorEntity.class));
		
		author.setEmailId(TestConstants.TEST_PUBLISHER_EMAIL_UPDATED);
		author.setPhoneNumber(TestConstants.TEST_PUBLISHER_PHONE_UPDATED);
		
		when(publisherRepository.findById(anyInt()))
		.thenReturn(LibraryApiTestUtil.createPublisherEntityOptional());
		publisherService.updatePublisher(publisher, TestConstants.API_TRACE_ID);
		
		verify(publisherRepository, times(1)).findById(publisher.getPublisherId());
		verify(publisherRepository, times(2)).save(any(PublisherEntity.class));
		
		assertTrue(TestConstants.TEST_PUBLISHER_EMAIL_UPDATED.equals(publisher.getEmailId()));
		assertTrue(TestConstants.TEST_PUBLISHER_PHONE_UPDATED.equals(publisher.getPhoneNumber()));
		
	}

	@Test
	public void deletePublisher_success() throws LibraryResourceNotFoundException {
		
		doNothing().when(publisherRepository).deleteById(123);
		publisherService. deletePublisher(123,TestConstants.API_TRACE_ID);
		verify(publisherRepository, times(1)).deleteById(123);
		
	}
	
	@Test(expected = LibraryResourceNotFoundException.class)
	public void deletePublisher_failure() throws LibraryResourceNotFoundException {
		
		doThrow(EmptyResultDataAccessException.class).when(publisherRepository.save(any(PublisherEntity.class)));
		publisherService. deletePublisher(123,TestConstants.API_TRACE_ID);
		verify(publisherRepository, times(1)).deleteById(123);
		
	}

	@Test
	public void SearchPublisher_success() {
		List<PublisherEntity>publisherEntityList = Arrays.asList(
				
				new PublisherEntity(TestConstants.TEST_PUBLISHER_NAME +1, TestConstants.TEST_PUBLISHER_EMAIL,TestConstants.TEST_PUBLISHER_PHONE),
				new PublisherEntity(TestConstants.TEST_PUBLISHER_NAME + 2, TestConstants.TEST_PUBLISHER_EMAIL, TestConstants.TEST_PUBLISHER_PHONE ));
		when(publisherRepository.findByNameContaining(TestConstants.TEST_PUBLISHER_NAME))
			.thenReturn(publisherEntityList);
		
		List<Publisher> publishers = publisherService.searchPublisher(TestConstants.TEST_PUBLISHER_NAME, TestConstants.API_TRACE_ID);
		
		verify(publisherRepository, times(1)).findByNameContaining(TestConstants.TEST_PUBLISHER_NAME);
		assertEquals(publisherEntityList.size(),publishers.size());
		assertEquals(publisherEntityList.size(),publishers.stream()
				
				.filter(publisher -> publisher.getName().contains(TestConstants.TEST_PUBLISHER_NAME)).count());
		
	}
	
	@Test
	public void SearchPublisher_failure() {
		
		when(publisherRepository.findByNameContaining(TestConstants.TEST_PUBLISHER_NAME))
			.thenReturn(Collections.emptyList());
		
		List<Publisher> publishers = publisherService.searchPublisher(TestConstants.TEST_PUBLISHER_NAME, TestConstants.API_TRACE_ID);
		
		verify(publisherRepository, times(1)).findByNameContaining(TestConstants.TEST_PUBLISHER_NAME);
		assertEquals(0,publishers.size());
		
	}


}
