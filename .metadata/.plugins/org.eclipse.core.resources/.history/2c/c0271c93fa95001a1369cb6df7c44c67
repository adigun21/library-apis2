package com.libraryapis2.exception;

import java.util.UUID;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import com.libraryapis2.model.common.LibraryApiError;
import com.libraryapis2.util.LibraryApiUtils;

@ControllerAdvice
public class LibraryControllerExceptionHandler  extends ResponseEntityExceptionHandler{
	
	@ExceptionHandler(LibraryResourceNotFoundException.class)
	public final ResponseEntity<LibraryApiError> handleLibraryResourceNotFoundException(
			LibraryResourceNotFoundException e, WebRequest webRequest) {
		
		return new ResponseEntity<>(new LibraryApiError(e.getTraceId(), e.getMessage()), HttpStatus.NOT_FOUND);
	}
			
	@ExceptionHandler(LibraryResourceAlreadyExistException.class)
	public final ResponseEntity<LibraryApiError> handleLibraryResourceAlreadyExistException(
			LibraryResourceAlreadyExistException e, WebRequest webRequest) {
		
		return new ResponseEntity<>(new LibraryApiError(e.getTraceId(), e.getMessage()), HttpStatus.CONFLICT);
	}		
	
	@ExceptionHandler(LibraryResourceBadRequestException.class)
	public final ResponseEntity<LibraryApiError> handleLibraryResourceBadRequestException(
			LibraryResourceBadRequestException e, WebRequest webRequest) {
		
		return new ResponseEntity<>(new LibraryApiError(e.getTraceId(), e.getMessage()), HttpStatus.BAD_REQUEST);
	}
	
	@ExceptionHandler(Exception.class)
	public final ResponseEntity<LibraryApiError> handleALLException(
			Exception e, WebRequest webRequest) {
		
		String traceId = getTraceId(webRequest);
		
		return new ResponseEntity<>(new LibraryApiError(traceId, e.getMessage()), HttpStatus.BAD_REQUEST);
	}

	private String getTraceId(WebRequest webRequest) {
		String traceId = webRequest.getHeader("TRace-Id");
		if(!LibraryApiUtils.doesStringValueExist(traceId)) {
			traceId = UUID.randomUUID().toString();
		}
		return traceId;
	}
	
	
	
	

}
